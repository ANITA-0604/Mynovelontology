{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WRITE = exports.READ = exports.Driver = void 0;\n\nvar bookmark_1 = require(\"./internal/bookmark\");\n\nvar connectivity_verifier_1 = require(\"./internal/connectivity-verifier\");\n\nvar configured_custom_resolver_1 = __importDefault(require(\"./internal/resolver/configured-custom-resolver\"));\n\nvar constants_1 = require(\"./internal/constants\");\n\nvar logger_1 = require(\"./internal/logger\");\n\nvar session_1 = __importDefault(require(\"./session\"));\n\nvar util_1 = require(\"./internal/util\");\n\nvar DEFAULT_MAX_CONNECTION_LIFETIME = 60 * 60 * 1000; // 1 hour\n\n/**\n * The default record fetch size. This is used in Bolt V4 protocol to pull query execution result in batches.\n * @type {number}\n */\n\nvar DEFAULT_FETCH_SIZE = 1000;\n/**\n * Constant that represents read session access mode.\n * Should be used like this: `driver.session({ defaultAccessMode: neo4j.session.READ })`.\n * @type {string}\n */\n\nvar READ = constants_1.ACCESS_MODE_READ;\nexports.READ = READ;\n/**\n * Constant that represents write session access mode.\n * Should be used like this: `driver.session({ defaultAccessMode: neo4j.session.WRITE })`.\n * @type {string}\n */\n\nvar WRITE = constants_1.ACCESS_MODE_WRITE;\nexports.WRITE = WRITE;\nvar idGenerator = 0;\n/**\n * A driver maintains one or more {@link Session}s with a remote\n * Neo4j instance. Through the {@link Session}s you can send queries\n * and retrieve results from the database.\n *\n * Drivers are reasonably expensive to create - you should strive to keep one\n * driver instance around per Neo4j Instance you connect to.\n *\n * @access public\n */\n\nvar Driver =\n/** @class */\nfunction () {\n  /**\n   * You should not be calling this directly, instead use {@link driver}.\n   * @constructor\n   * @protected\n   * @param {Object} meta Metainformation about the driver\n   * @param {Object} config\n   * @param {function(id: number, config:Object, log:Logger, hostNameResolver: ConfiguredCustomResolver): ConnectionProvider } createConnectonProvider Creates the connection provider\n   */\n  function Driver(meta, config, createConnectonProvider) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    sanitizeConfig(config);\n    validateConfig(config);\n    this._id = idGenerator++;\n    this._meta = meta;\n    this._config = config;\n    this._log = logger_1.Logger.create(config);\n    this._createConnectionProvider = createConnectonProvider;\n    /**\n     * Reference to the connection provider. Initialized lazily by {@link _getOrCreateConnectionProvider}.\n     * @type {ConnectionProvider}\n     * @protected\n     */\n\n    this._connectionProvider = null;\n\n    this._afterConstruction();\n  }\n  /**\n   * Verifies connectivity of this driver by trying to open a connection with the provided driver options.\n   *\n   * @public\n   * @param {Object} param - The object parameter\n   * @param {string} param.database - The target database to verify connectivity for.\n   * @returns {Promise<ServerInfo>} promise resolved with server info or rejected with error.\n   */\n\n\n  Driver.prototype.verifyConnectivity = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.database,\n        database = _c === void 0 ? '' : _c;\n\n    var connectionProvider = this._getOrCreateConnectionProvider();\n\n    var connectivityVerifier = new connectivity_verifier_1.ConnectivityVerifier(connectionProvider);\n    return connectivityVerifier.verify({\n      database: database\n    });\n  };\n  /**\n   * Returns whether the server supports multi database capabilities based on the protocol\n   * version negotiated via handshake.\n   *\n   * Note that this function call _always_ causes a round-trip to the server.\n   *\n   * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n   */\n\n\n  Driver.prototype.supportsMultiDb = function () {\n    var connectionProvider = this._getOrCreateConnectionProvider();\n\n    return connectionProvider.supportsMultiDb();\n  };\n  /**\n   * Returns whether the server supports transaction config capabilities based on the protocol\n   * version negotiated via handshake.\n   *\n   * Note that this function call _always_ causes a round-trip to the server.\n   *\n   * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n   */\n\n\n  Driver.prototype.supportsTransactionConfig = function () {\n    var connectionProvider = this._getOrCreateConnectionProvider();\n\n    return connectionProvider.supportsTransactionConfig();\n  };\n  /**\n   * @protected\n   * @returns {boolean}\n   */\n\n\n  Driver.prototype._supportsRouting = function () {\n    return this._meta.routing;\n  };\n  /**\n   * Returns boolean to indicate if driver has been configured with encryption enabled.\n   *\n   * @protected\n   * @returns {boolean}\n   */\n\n\n  Driver.prototype._isEncrypted = function () {\n    return this._config.encrypted === util_1.ENCRYPTION_ON;\n  };\n  /**\n   * Returns the configured trust strategy that the driver has been configured with.\n   *\n   * @protected\n   * @returns {TrustStrategy}\n   */\n\n\n  Driver.prototype._getTrust = function () {\n    return this._config.trust;\n  };\n  /**\n   * Acquire a session to communicate with the database. The session will\n   * borrow connections from the underlying connection pool as required and\n   * should be considered lightweight and disposable.\n   *\n   * This comes with some responsibility - make sure you always call\n   * {@link close} when you are done using a session, and likewise,\n   * make sure you don't close your session before you are done using it. Once\n   * it is closed, the underlying connection will be released to the connection\n   * pool and made available for others to use.\n   *\n   * @public\n   * @param {Object} param - The object parameter\n   * @param {string} param.defaultAccessMode=WRITE - The access mode of this session, allowed values are {@link READ} and {@link WRITE}.\n   * @param {string|string[]} param.bookmarks - The initial reference or references to some previous\n   * transactions. Value is optional and absence indicates that that the bookmarks do not exist or are unknown.\n   * @param {number} param.fetchSize - The record fetch size of each batch of this session.\n   * Use {@link FETCH_ALL} to always pull all records in one batch. This will override the config value set on driver config.\n   * @param {string} param.database - The database this session will operate on.\n   * @return {Session} new session.\n   */\n\n\n  Driver.prototype.session = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.defaultAccessMode,\n        defaultAccessMode = _c === void 0 ? WRITE : _c,\n        bookmarkOrBookmarks = _b.bookmarks,\n        _d = _b.database,\n        database = _d === void 0 ? '' : _d,\n        fetchSize = _b.fetchSize;\n\n    return this._newSession({\n      defaultAccessMode: defaultAccessMode,\n      bookmarkOrBookmarks: bookmarkOrBookmarks,\n      database: database,\n      reactive: false,\n      fetchSize: validateFetchSizeValue(fetchSize, this._config.fetchSize)\n    });\n  };\n  /**\n   * Close all open sessions and other associated resources. You should\n   * make sure to use this when you are done with this driver instance.\n   * @public\n   * @return {Promise<void>} promise resolved when the driver is closed.\n   */\n\n\n  Driver.prototype.close = function () {\n    this._log.info(\"Driver \" + this._id + \" closing\");\n\n    if (this._connectionProvider) {\n      return this._connectionProvider.close();\n    }\n\n    return Promise.resolve();\n  };\n  /**\n   * @protected\n   */\n\n\n  Driver.prototype._afterConstruction = function () {\n    this._log.info(this._meta.typename + \" driver \" + this._id + \" created for server address \" + this._meta.address);\n  };\n  /**\n   * @private\n   */\n\n\n  Driver.prototype._newSession = function (_a) {\n    var defaultAccessMode = _a.defaultAccessMode,\n        bookmarkOrBookmarks = _a.bookmarkOrBookmarks,\n        database = _a.database,\n        reactive = _a.reactive,\n        fetchSize = _a.fetchSize;\n\n    var sessionMode = session_1.default._validateSessionMode(defaultAccessMode);\n\n    var connectionProvider = this._getOrCreateConnectionProvider();\n\n    var bookmark = bookmarkOrBookmarks ? new bookmark_1.Bookmark(bookmarkOrBookmarks) : bookmark_1.Bookmark.empty();\n    return new session_1.default({\n      mode: sessionMode,\n      database: database || '',\n      connectionProvider: connectionProvider,\n      bookmark: bookmark,\n      config: this._config,\n      reactive: reactive,\n      fetchSize: fetchSize\n    });\n  };\n  /**\n   * @private\n   */\n\n\n  Driver.prototype._getOrCreateConnectionProvider = function () {\n    if (!this._connectionProvider) {\n      this._connectionProvider = this._createConnectionProvider(this._id, this._config, this._log, createHostNameResolver(this._config));\n    }\n\n    return this._connectionProvider;\n  };\n\n  return Driver;\n}();\n\nexports.Driver = Driver;\n/**\n * @private\n * @returns {Object} the given config.\n */\n\nfunction validateConfig(config) {\n  var resolver = config.resolver;\n\n  if (resolver && typeof resolver !== 'function') {\n    throw new TypeError(\"Configured resolver should be a function. Got: \" + resolver);\n  }\n\n  return config;\n}\n/**\n * @private\n */\n\n\nfunction sanitizeConfig(config) {\n  config.maxConnectionLifetime = sanitizeIntValue(config.maxConnectionLifetime, DEFAULT_MAX_CONNECTION_LIFETIME);\n  config.maxConnectionPoolSize = sanitizeIntValue(config.maxConnectionPoolSize, constants_1.DEFAULT_POOL_MAX_SIZE);\n  config.connectionAcquisitionTimeout = sanitizeIntValue(config.connectionAcquisitionTimeout, constants_1.DEFAULT_POOL_ACQUISITION_TIMEOUT);\n  config.fetchSize = validateFetchSizeValue(config.fetchSize, DEFAULT_FETCH_SIZE);\n}\n/**\n * @private\n */\n\n\nfunction sanitizeIntValue(rawValue, defaultWhenAbsent) {\n  var sanitizedValue = parseInt(rawValue, 10);\n\n  if (sanitizedValue > 0 || sanitizedValue === 0) {\n    return sanitizedValue;\n  } else if (sanitizedValue < 0) {\n    return Number.MAX_SAFE_INTEGER;\n  } else {\n    return defaultWhenAbsent;\n  }\n}\n/**\n * @private\n */\n\n\nfunction validateFetchSizeValue(rawValue, defaultWhenAbsent) {\n  var fetchSize = parseInt(rawValue, 10);\n\n  if (fetchSize > 0 || fetchSize === constants_1.FETCH_ALL) {\n    return fetchSize;\n  } else if (fetchSize === 0 || fetchSize < 0) {\n    throw new Error(\"The fetch size can only be a positive value or \" + constants_1.FETCH_ALL + \" for ALL. However fetchSize = \" + fetchSize);\n  } else {\n    return defaultWhenAbsent;\n  }\n}\n/**\n * @private\n * @returns {ConfiguredCustomResolver} new custom resolver that wraps the passed-in resolver function.\n *              If resolved function is not specified, it defaults to an identity resolver.\n */\n\n\nfunction createHostNameResolver(config) {\n  return new configured_custom_resolver_1.default(config.resolver);\n}\n\nexports.default = Driver;","map":{"version":3,"sources":["/Users/ericyangchen/Downloads/Ont/frontend/node_modules/neo4j-driver-core/lib/driver.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","WRITE","READ","Driver","bookmark_1","require","connectivity_verifier_1","configured_custom_resolver_1","constants_1","logger_1","session_1","util_1","DEFAULT_MAX_CONNECTION_LIFETIME","DEFAULT_FETCH_SIZE","ACCESS_MODE_READ","ACCESS_MODE_WRITE","idGenerator","meta","config","createConnectonProvider","sanitizeConfig","validateConfig","_id","_meta","_config","_log","Logger","create","_createConnectionProvider","_connectionProvider","_afterConstruction","prototype","verifyConnectivity","_a","_b","_c","database","connectionProvider","_getOrCreateConnectionProvider","connectivityVerifier","ConnectivityVerifier","verify","supportsMultiDb","supportsTransactionConfig","_supportsRouting","routing","_isEncrypted","encrypted","ENCRYPTION_ON","_getTrust","trust","session","defaultAccessMode","bookmarkOrBookmarks","bookmarks","_d","fetchSize","_newSession","reactive","validateFetchSizeValue","close","info","Promise","resolve","typename","address","sessionMode","default","_validateSessionMode","bookmark","Bookmark","empty","mode","createHostNameResolver","resolver","TypeError","maxConnectionLifetime","sanitizeIntValue","maxConnectionPoolSize","DEFAULT_POOL_MAX_SIZE","connectionAcquisitionTimeout","DEFAULT_POOL_ACQUISITION_TIMEOUT","rawValue","defaultWhenAbsent","sanitizedValue","parseInt","Number","MAX_SAFE_INTEGER","FETCH_ALL","Error"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WRITE = exports.READ = exports.Driver = void 0;\nvar bookmark_1 = require(\"./internal/bookmark\");\nvar connectivity_verifier_1 = require(\"./internal/connectivity-verifier\");\nvar configured_custom_resolver_1 = __importDefault(require(\"./internal/resolver/configured-custom-resolver\"));\nvar constants_1 = require(\"./internal/constants\");\nvar logger_1 = require(\"./internal/logger\");\nvar session_1 = __importDefault(require(\"./session\"));\nvar util_1 = require(\"./internal/util\");\nvar DEFAULT_MAX_CONNECTION_LIFETIME = 60 * 60 * 1000; // 1 hour\n/**\n * The default record fetch size. This is used in Bolt V4 protocol to pull query execution result in batches.\n * @type {number}\n */\nvar DEFAULT_FETCH_SIZE = 1000;\n/**\n * Constant that represents read session access mode.\n * Should be used like this: `driver.session({ defaultAccessMode: neo4j.session.READ })`.\n * @type {string}\n */\nvar READ = constants_1.ACCESS_MODE_READ;\nexports.READ = READ;\n/**\n * Constant that represents write session access mode.\n * Should be used like this: `driver.session({ defaultAccessMode: neo4j.session.WRITE })`.\n * @type {string}\n */\nvar WRITE = constants_1.ACCESS_MODE_WRITE;\nexports.WRITE = WRITE;\nvar idGenerator = 0;\n/**\n * A driver maintains one or more {@link Session}s with a remote\n * Neo4j instance. Through the {@link Session}s you can send queries\n * and retrieve results from the database.\n *\n * Drivers are reasonably expensive to create - you should strive to keep one\n * driver instance around per Neo4j Instance you connect to.\n *\n * @access public\n */\nvar Driver = /** @class */ (function () {\n    /**\n     * You should not be calling this directly, instead use {@link driver}.\n     * @constructor\n     * @protected\n     * @param {Object} meta Metainformation about the driver\n     * @param {Object} config\n     * @param {function(id: number, config:Object, log:Logger, hostNameResolver: ConfiguredCustomResolver): ConnectionProvider } createConnectonProvider Creates the connection provider\n     */\n    function Driver(meta, config, createConnectonProvider) {\n        if (config === void 0) { config = {}; }\n        sanitizeConfig(config);\n        validateConfig(config);\n        this._id = idGenerator++;\n        this._meta = meta;\n        this._config = config;\n        this._log = logger_1.Logger.create(config);\n        this._createConnectionProvider = createConnectonProvider;\n        /**\n         * Reference to the connection provider. Initialized lazily by {@link _getOrCreateConnectionProvider}.\n         * @type {ConnectionProvider}\n         * @protected\n         */\n        this._connectionProvider = null;\n        this._afterConstruction();\n    }\n    /**\n     * Verifies connectivity of this driver by trying to open a connection with the provided driver options.\n     *\n     * @public\n     * @param {Object} param - The object parameter\n     * @param {string} param.database - The target database to verify connectivity for.\n     * @returns {Promise<ServerInfo>} promise resolved with server info or rejected with error.\n     */\n    Driver.prototype.verifyConnectivity = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.database, database = _c === void 0 ? '' : _c;\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        var connectivityVerifier = new connectivity_verifier_1.ConnectivityVerifier(connectionProvider);\n        return connectivityVerifier.verify({ database: database });\n    };\n    /**\n     * Returns whether the server supports multi database capabilities based on the protocol\n     * version negotiated via handshake.\n     *\n     * Note that this function call _always_ causes a round-trip to the server.\n     *\n     * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n     */\n    Driver.prototype.supportsMultiDb = function () {\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        return connectionProvider.supportsMultiDb();\n    };\n    /**\n     * Returns whether the server supports transaction config capabilities based on the protocol\n     * version negotiated via handshake.\n     *\n     * Note that this function call _always_ causes a round-trip to the server.\n     *\n     * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n     */\n    Driver.prototype.supportsTransactionConfig = function () {\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        return connectionProvider.supportsTransactionConfig();\n    };\n    /**\n     * @protected\n     * @returns {boolean}\n     */\n    Driver.prototype._supportsRouting = function () {\n        return this._meta.routing;\n    };\n    /**\n     * Returns boolean to indicate if driver has been configured with encryption enabled.\n     *\n     * @protected\n     * @returns {boolean}\n     */\n    Driver.prototype._isEncrypted = function () {\n        return this._config.encrypted === util_1.ENCRYPTION_ON;\n    };\n    /**\n     * Returns the configured trust strategy that the driver has been configured with.\n     *\n     * @protected\n     * @returns {TrustStrategy}\n     */\n    Driver.prototype._getTrust = function () {\n        return this._config.trust;\n    };\n    /**\n     * Acquire a session to communicate with the database. The session will\n     * borrow connections from the underlying connection pool as required and\n     * should be considered lightweight and disposable.\n     *\n     * This comes with some responsibility - make sure you always call\n     * {@link close} when you are done using a session, and likewise,\n     * make sure you don't close your session before you are done using it. Once\n     * it is closed, the underlying connection will be released to the connection\n     * pool and made available for others to use.\n     *\n     * @public\n     * @param {Object} param - The object parameter\n     * @param {string} param.defaultAccessMode=WRITE - The access mode of this session, allowed values are {@link READ} and {@link WRITE}.\n     * @param {string|string[]} param.bookmarks - The initial reference or references to some previous\n     * transactions. Value is optional and absence indicates that that the bookmarks do not exist or are unknown.\n     * @param {number} param.fetchSize - The record fetch size of each batch of this session.\n     * Use {@link FETCH_ALL} to always pull all records in one batch. This will override the config value set on driver config.\n     * @param {string} param.database - The database this session will operate on.\n     * @return {Session} new session.\n     */\n    Driver.prototype.session = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.defaultAccessMode, defaultAccessMode = _c === void 0 ? WRITE : _c, bookmarkOrBookmarks = _b.bookmarks, _d = _b.database, database = _d === void 0 ? '' : _d, fetchSize = _b.fetchSize;\n        return this._newSession({\n            defaultAccessMode: defaultAccessMode,\n            bookmarkOrBookmarks: bookmarkOrBookmarks,\n            database: database,\n            reactive: false,\n            fetchSize: validateFetchSizeValue(fetchSize, this._config.fetchSize)\n        });\n    };\n    /**\n     * Close all open sessions and other associated resources. You should\n     * make sure to use this when you are done with this driver instance.\n     * @public\n     * @return {Promise<void>} promise resolved when the driver is closed.\n     */\n    Driver.prototype.close = function () {\n        this._log.info(\"Driver \" + this._id + \" closing\");\n        if (this._connectionProvider) {\n            return this._connectionProvider.close();\n        }\n        return Promise.resolve();\n    };\n    /**\n     * @protected\n     */\n    Driver.prototype._afterConstruction = function () {\n        this._log.info(this._meta.typename + \" driver \" + this._id + \" created for server address \" + this._meta.address);\n    };\n    /**\n     * @private\n     */\n    Driver.prototype._newSession = function (_a) {\n        var defaultAccessMode = _a.defaultAccessMode, bookmarkOrBookmarks = _a.bookmarkOrBookmarks, database = _a.database, reactive = _a.reactive, fetchSize = _a.fetchSize;\n        var sessionMode = session_1.default._validateSessionMode(defaultAccessMode);\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        var bookmark = bookmarkOrBookmarks\n            ? new bookmark_1.Bookmark(bookmarkOrBookmarks)\n            : bookmark_1.Bookmark.empty();\n        return new session_1.default({\n            mode: sessionMode,\n            database: database || '',\n            connectionProvider: connectionProvider,\n            bookmark: bookmark,\n            config: this._config,\n            reactive: reactive,\n            fetchSize: fetchSize\n        });\n    };\n    /**\n     * @private\n     */\n    Driver.prototype._getOrCreateConnectionProvider = function () {\n        if (!this._connectionProvider) {\n            this._connectionProvider = this._createConnectionProvider(this._id, this._config, this._log, createHostNameResolver(this._config));\n        }\n        return this._connectionProvider;\n    };\n    return Driver;\n}());\nexports.Driver = Driver;\n/**\n * @private\n * @returns {Object} the given config.\n */\nfunction validateConfig(config) {\n    var resolver = config.resolver;\n    if (resolver && typeof resolver !== 'function') {\n        throw new TypeError(\"Configured resolver should be a function. Got: \" + resolver);\n    }\n    return config;\n}\n/**\n * @private\n */\nfunction sanitizeConfig(config) {\n    config.maxConnectionLifetime = sanitizeIntValue(config.maxConnectionLifetime, DEFAULT_MAX_CONNECTION_LIFETIME);\n    config.maxConnectionPoolSize = sanitizeIntValue(config.maxConnectionPoolSize, constants_1.DEFAULT_POOL_MAX_SIZE);\n    config.connectionAcquisitionTimeout = sanitizeIntValue(config.connectionAcquisitionTimeout, constants_1.DEFAULT_POOL_ACQUISITION_TIMEOUT);\n    config.fetchSize = validateFetchSizeValue(config.fetchSize, DEFAULT_FETCH_SIZE);\n}\n/**\n * @private\n */\nfunction sanitizeIntValue(rawValue, defaultWhenAbsent) {\n    var sanitizedValue = parseInt(rawValue, 10);\n    if (sanitizedValue > 0 || sanitizedValue === 0) {\n        return sanitizedValue;\n    }\n    else if (sanitizedValue < 0) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n    else {\n        return defaultWhenAbsent;\n    }\n}\n/**\n * @private\n */\nfunction validateFetchSizeValue(rawValue, defaultWhenAbsent) {\n    var fetchSize = parseInt(rawValue, 10);\n    if (fetchSize > 0 || fetchSize === constants_1.FETCH_ALL) {\n        return fetchSize;\n    }\n    else if (fetchSize === 0 || fetchSize < 0) {\n        throw new Error(\"The fetch size can only be a positive value or \" + constants_1.FETCH_ALL + \" for ALL. However fetchSize = \" + fetchSize);\n    }\n    else {\n        return defaultWhenAbsent;\n    }\n}\n/**\n * @private\n * @returns {ConfiguredCustomResolver} new custom resolver that wraps the passed-in resolver function.\n *              If resolved function is not specified, it defaults to an identity resolver.\n */\nfunction createHostNameResolver(config) {\n    return new configured_custom_resolver_1.default(config.resolver);\n}\nexports.default = Driver;\n"]},"metadata":{},"sourceType":"script"}