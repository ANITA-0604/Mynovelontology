{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertTxConfigIsEmpty = exports.assertDatabaseIsEmpty = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n/**\n * @param {TxConfig} txConfig the auto-commit transaction configuration.\n * @param {function(error: string)} onProtocolError called when the txConfig is not empty.\n * @param {ResultStreamObserver} observer the response observer.\n */\n\n\nfunction assertTxConfigIsEmpty(txConfig, onProtocolError, observer) {\n  if (onProtocolError === void 0) {\n    onProtocolError = function () {};\n  }\n\n  if (txConfig && !txConfig.isEmpty()) {\n    var error = neo4j_driver_core_1.newError('Driver is connected to the database that does not support transaction configuration. ' + 'Please upgrade to neo4j 3.5.0 or later in order to use this functionality'); // unsupported API was used, consider this a fatal error for the current connection\n\n    onProtocolError(error.message);\n    observer.onError(error);\n    throw error;\n  }\n}\n\nexports.assertTxConfigIsEmpty = assertTxConfigIsEmpty;\n/**\n * Asserts that the passed-in database name is empty.\n * @param {string} database\n * @param {fuction(err: String)} onProtocolError Called when it doesn't have database set\n */\n\nfunction assertDatabaseIsEmpty(database, onProtocolError, observer) {\n  if (onProtocolError === void 0) {\n    onProtocolError = function () {};\n  }\n\n  if (database) {\n    var error = neo4j_driver_core_1.newError('Driver is connected to the database that does not support multiple databases. ' + 'Please upgrade to neo4j 4.0.0 or later in order to use this functionality'); // unsupported API was used, consider this a fatal error for the current connection\n\n    onProtocolError(error.message);\n    observer.onError(error);\n    throw error;\n  }\n}\n\nexports.assertDatabaseIsEmpty = assertDatabaseIsEmpty;","map":{"version":3,"sources":["/Users/ericyangchen/Downloads/Ont/frontend/node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-util.js"],"names":["Object","defineProperty","exports","value","assertTxConfigIsEmpty","assertDatabaseIsEmpty","neo4j_driver_core_1","require","txConfig","onProtocolError","observer","isEmpty","error","newError","message","onError","database"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,qBAAR,GAAgCF,OAAO,CAACG,qBAAR,GAAgC,KAAK,CAArE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,mBAAmB,GAAGC,OAAO,CAAC,mBAAD,CAAjC;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASH,qBAAT,CAA+BI,QAA/B,EAAyCC,eAAzC,EAA0DC,QAA1D,EAAoE;AAChE,MAAID,eAAe,KAAK,KAAK,CAA7B,EAAgC;AAAEA,IAAAA,eAAe,GAAG,YAAY,CAAG,CAAjC;AAAoC;;AACtE,MAAID,QAAQ,IAAI,CAACA,QAAQ,CAACG,OAAT,EAAjB,EAAqC;AACjC,QAAIC,KAAK,GAAGN,mBAAmB,CAACO,QAApB,CAA6B,0FACrC,2EADQ,CAAZ,CADiC,CAGjC;;AACAJ,IAAAA,eAAe,CAACG,KAAK,CAACE,OAAP,CAAf;AACAJ,IAAAA,QAAQ,CAACK,OAAT,CAAiBH,KAAjB;AACA,UAAMA,KAAN;AACH;AACJ;;AACDV,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,qBAAT,CAA+BW,QAA/B,EAAyCP,eAAzC,EAA0DC,QAA1D,EAAoE;AAChE,MAAID,eAAe,KAAK,KAAK,CAA7B,EAAgC;AAAEA,IAAAA,eAAe,GAAG,YAAY,CAAG,CAAjC;AAAoC;;AACtE,MAAIO,QAAJ,EAAc;AACV,QAAIJ,KAAK,GAAGN,mBAAmB,CAACO,QAApB,CAA6B,mFACrC,2EADQ,CAAZ,CADU,CAGV;;AACAJ,IAAAA,eAAe,CAACG,KAAK,CAACE,OAAP,CAAf;AACAJ,IAAAA,QAAQ,CAACK,OAAT,CAAiBH,KAAjB;AACA,UAAMA,KAAN;AACH;AACJ;;AACDV,OAAO,CAACG,qBAAR,GAAgCA,qBAAhC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertTxConfigIsEmpty = exports.assertDatabaseIsEmpty = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n/**\n * @param {TxConfig} txConfig the auto-commit transaction configuration.\n * @param {function(error: string)} onProtocolError called when the txConfig is not empty.\n * @param {ResultStreamObserver} observer the response observer.\n */\nfunction assertTxConfigIsEmpty(txConfig, onProtocolError, observer) {\n    if (onProtocolError === void 0) { onProtocolError = function () { }; }\n    if (txConfig && !txConfig.isEmpty()) {\n        var error = neo4j_driver_core_1.newError('Driver is connected to the database that does not support transaction configuration. ' +\n            'Please upgrade to neo4j 3.5.0 or later in order to use this functionality');\n        // unsupported API was used, consider this a fatal error for the current connection\n        onProtocolError(error.message);\n        observer.onError(error);\n        throw error;\n    }\n}\nexports.assertTxConfigIsEmpty = assertTxConfigIsEmpty;\n/**\n * Asserts that the passed-in database name is empty.\n * @param {string} database\n * @param {fuction(err: String)} onProtocolError Called when it doesn't have database set\n */\nfunction assertDatabaseIsEmpty(database, onProtocolError, observer) {\n    if (onProtocolError === void 0) { onProtocolError = function () { }; }\n    if (database) {\n        var error = neo4j_driver_core_1.newError('Driver is connected to the database that does not support multiple databases. ' +\n            'Please upgrade to neo4j 4.0.0 or later in order to use this functionality');\n        // unsupported API was used, consider this a fatal error for the current connection\n        onProtocolError(error.message);\n        observer.onError(error);\n        throw error;\n    }\n}\nexports.assertDatabaseIsEmpty = assertDatabaseIsEmpty;\n"]},"metadata":{},"sourceType":"script"}