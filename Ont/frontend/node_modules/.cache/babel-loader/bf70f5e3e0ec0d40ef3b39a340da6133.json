{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar bolt_protocol_util_1 = require(\"./bolt-protocol-util\");\n\nvar packstream_1 = require(\"../packstream\");\n\nvar request_message_1 = __importDefault(require(\"./request-message\"));\n\nvar stream_observers_1 = require(\"./stream-observers\");\n\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n\nvar Bookmark = neo4j_driver_core_1.internal.bookmark.Bookmark,\n    _a = neo4j_driver_core_1.internal.constants,\n    ACCESS_MODE_WRITE = _a.ACCESS_MODE_WRITE,\n    BOLT_PROTOCOL_V1 = _a.BOLT_PROTOCOL_V1,\n    Logger = neo4j_driver_core_1.internal.logger.Logger,\n    TxConfig = neo4j_driver_core_1.internal.txConfig.TxConfig;\n\nvar BoltProtocol =\n/** @class */\nfunction () {\n  /**\n   * @callback CreateResponseHandler Creates the response handler\n   * @param {BoltProtocol} protocol The bolt protocol\n   * @returns {ResponseHandler} The response handler\n   */\n\n  /**\n   * @callback OnProtocolError Handles protocol error\n   * @param {string} error The description\n   */\n\n  /**\n   * @constructor\n   * @param {Object} server the server informatio.\n   * @param {Chunker} chunker the chunker.\n   * @param {Object} packstreamConfig Packstream configuration\n   * @param {boolean} packstreamConfig.disableLosslessIntegers if this connection should convert all received integers to native JS numbers.\n   * @param {boolean} packstreamConfig.useBigInt if this connection should convert all received integers to native BigInt numbers.\n   * @param {CreateResponseHandler} createResponseHandler Function which creates the response handler\n   * @param {Logger} log the logger\n   * @param {OnProtocolError} onProtocolError handles protocol errors\n   */\n  function BoltProtocol(server, chunker, _a, createResponseHandler, log, onProtocolError) {\n    var _b = _a === void 0 ? {} : _a,\n        disableLosslessIntegers = _b.disableLosslessIntegers,\n        useBigInt = _b.useBigInt;\n\n    if (createResponseHandler === void 0) {\n      createResponseHandler = function () {\n        return null;\n      };\n    }\n\n    this._server = server || {};\n    this._chunker = chunker;\n    this._packer = this._createPacker(chunker);\n    this._unpacker = this._createUnpacker(disableLosslessIntegers, useBigInt);\n    this._responseHandler = createResponseHandler(this);\n    this._log = log;\n    this._onProtocolError = onProtocolError;\n    this._fatalError = null;\n  }\n\n  Object.defineProperty(BoltProtocol.prototype, \"version\", {\n    /**\n     * Returns the numerical version identifier for this protocol\n     */\n    get: function () {\n      return BOLT_PROTOCOL_V1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Get the packer.\n   * @return {Packer} the protocol's packer.\n   */\n\n  BoltProtocol.prototype.packer = function () {\n    return this._packer;\n  };\n  /**\n   * Get the unpacker.\n   * @return {Unpacker} the protocol's unpacker.\n   */\n\n\n  BoltProtocol.prototype.unpacker = function () {\n    return this._unpacker;\n  };\n  /**\n   * Transform metadata received in SUCCESS message before it is passed to the handler.\n   * @param {Object} metadata the received metadata.\n   * @return {Object} transformed metadata.\n   */\n\n\n  BoltProtocol.prototype.transformMetadata = function (metadata) {\n    return metadata;\n  };\n  /**\n   * Perform initialization and authentication of the underlying connection.\n   * @param {Object} param\n   * @param {string} param.userAgent the user agent.\n   * @param {Object} param.authToken the authentication token.\n   * @param {function(err: Error)} param.onError the callback to invoke on error.\n   * @param {function()} param.onComplete the callback to invoke on completion.\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n   */\n\n\n  BoltProtocol.prototype.initialize = function (_a) {\n    var _this = this;\n\n    var _b = _a === void 0 ? {} : _a,\n        userAgent = _b.userAgent,\n        authToken = _b.authToken,\n        onError = _b.onError,\n        onComplete = _b.onComplete;\n\n    var observer = new stream_observers_1.LoginObserver({\n      onError: function (error) {\n        return _this._onLoginError(error, onError);\n      },\n      onCompleted: function (metadata) {\n        return _this._onLoginCompleted(metadata, onComplete);\n      }\n    });\n    this.write(request_message_1.default.init(userAgent, authToken), observer, true);\n    return observer;\n  };\n  /**\n   * Perform protocol related operations for closing this connection\n   */\n\n\n  BoltProtocol.prototype.prepareToClose = function () {// no need to notify the database in this protocol version\n  };\n  /**\n   * Begin an explicit transaction.\n   * @param {Object} param\n   * @param {Bookmark} param.bookmark the bookmark.\n   * @param {TxConfig} param.txConfig the configuration.\n   * @param {string} param.database the target database name.\n   * @param {string} param.mode the access mode.\n   * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n   * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n   * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n   * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n   */\n\n\n  BoltProtocol.prototype.beginTransaction = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        bookmark = _b.bookmark,\n        txConfig = _b.txConfig,\n        database = _b.database,\n        mode = _b.mode,\n        beforeError = _b.beforeError,\n        afterError = _b.afterError,\n        beforeComplete = _b.beforeComplete,\n        afterComplete = _b.afterComplete;\n\n    return this.run('BEGIN', bookmark ? bookmark.asBeginTransactionParameters() : {}, {\n      bookmark: bookmark,\n      txConfig: txConfig,\n      database: database,\n      mode: mode,\n      beforeError: beforeError,\n      afterError: afterError,\n      beforeComplete: beforeComplete,\n      afterComplete: afterComplete,\n      flush: false\n    });\n  };\n  /**\n   * Commit the explicit transaction.\n   * @param {Object} param\n   * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n   * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n   * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n   * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n   */\n\n\n  BoltProtocol.prototype.commitTransaction = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        beforeError = _b.beforeError,\n        afterError = _b.afterError,\n        beforeComplete = _b.beforeComplete,\n        afterComplete = _b.afterComplete; // WRITE access mode is used as a place holder here, it has\n    // no effect on behaviour for Bolt V1 & V2\n\n\n    return this.run('COMMIT', {}, {\n      bookmark: Bookmark.empty(),\n      txConfig: TxConfig.empty(),\n      mode: ACCESS_MODE_WRITE,\n      beforeError: beforeError,\n      afterError: afterError,\n      beforeComplete: beforeComplete,\n      afterComplete: afterComplete\n    });\n  };\n  /**\n   * Rollback the explicit transaction.\n   * @param {Object} param\n   * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n   * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n   * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n   * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n   */\n\n\n  BoltProtocol.prototype.rollbackTransaction = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        beforeError = _b.beforeError,\n        afterError = _b.afterError,\n        beforeComplete = _b.beforeComplete,\n        afterComplete = _b.afterComplete; // WRITE access mode is used as a place holder here, it has\n    // no effect on behaviour for Bolt V1 & V2\n\n\n    return this.run('ROLLBACK', {}, {\n      bookmark: Bookmark.empty(),\n      txConfig: TxConfig.empty(),\n      mode: ACCESS_MODE_WRITE,\n      beforeError: beforeError,\n      afterError: afterError,\n      beforeComplete: beforeComplete,\n      afterComplete: afterComplete\n    });\n  };\n  /**\n   * Send a Cypher query through the underlying connection.\n   * @param {string} query the cypher query.\n   * @param {Object} parameters the query parameters.\n   * @param {Object} param\n   * @param {Bookmark} param.bookmark the bookmark.\n   * @param {TxConfig} param.txConfig the transaction configuration.\n   * @param {string} param.database the target database name.\n   * @param {string} param.mode the access mode.\n   * @param {function(keys: string[])} param.beforeKeys the callback to invoke before handling the keys.\n   * @param {function(keys: string[])} param.afterKeys the callback to invoke after handling the keys.\n   * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n   * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n   * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n   * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n   * @param {boolean} param.flush whether to flush the buffered messages.\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n   */\n\n\n  BoltProtocol.prototype.run = function (query, parameters, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        bookmark = _b.bookmark,\n        txConfig = _b.txConfig,\n        database = _b.database,\n        mode = _b.mode,\n        beforeKeys = _b.beforeKeys,\n        afterKeys = _b.afterKeys,\n        beforeError = _b.beforeError,\n        afterError = _b.afterError,\n        beforeComplete = _b.beforeComplete,\n        afterComplete = _b.afterComplete,\n        _c = _b.flush,\n        flush = _c === void 0 ? true : _c;\n\n    var observer = new stream_observers_1.ResultStreamObserver({\n      server: this._server,\n      beforeKeys: beforeKeys,\n      afterKeys: afterKeys,\n      beforeError: beforeError,\n      afterError: afterError,\n      beforeComplete: beforeComplete,\n      afterComplete: afterComplete\n    }); // bookmark and mode are ignored in this version of the protocol\n\n    bolt_protocol_util_1.assertTxConfigIsEmpty(txConfig, this._onProtocolError, observer); // passing in a database name on this protocol version throws an error\n\n    bolt_protocol_util_1.assertDatabaseIsEmpty(database, this._onProtocolError, observer);\n    this.write(request_message_1.default.run(query, parameters), observer, false);\n    this.write(request_message_1.default.pullAll(), observer, flush);\n    return observer;\n  };\n  /**\n   * Send a RESET through the underlying connection.\n   * @param {Object} param\n   * @param {function(err: Error)} param.onError the callback to invoke on error.\n   * @param {function()} param.onComplete the callback to invoke on completion.\n   * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n   */\n\n\n  BoltProtocol.prototype.reset = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        onError = _b.onError,\n        onComplete = _b.onComplete;\n\n    var observer = new stream_observers_1.ResetObserver({\n      onProtocolError: this._onProtocolError,\n      onError: onError,\n      onComplete: onComplete\n    });\n    this.write(request_message_1.default.reset(), observer, true);\n    return observer;\n  };\n\n  BoltProtocol.prototype._createPacker = function (chunker) {\n    return new packstream_1.v1.Packer(chunker);\n  };\n\n  BoltProtocol.prototype._createUnpacker = function (disableLosslessIntegers, useBigInt) {\n    return new packstream_1.v1.Unpacker(disableLosslessIntegers, useBigInt);\n  };\n  /**\n   * Write a message to the network channel.\n   * @param {RequestMessage} message the message to write.\n   * @param {StreamObserver} observer the response observer.\n   * @param {boolean} flush `true` if flush should happen after the message is written to the buffer.\n   */\n\n\n  BoltProtocol.prototype.write = function (message, observer, flush) {\n    var _this = this;\n\n    var queued = this.queueObserverIfProtocolIsNotBroken(observer);\n\n    if (queued) {\n      if (this._log.isDebugEnabled()) {\n        this._log.debug(this + \" C: \" + message);\n      }\n\n      this.packer().packStruct(message.signature, message.fields.map(function (field) {\n        return _this.packer().packable(field);\n      }));\n\n      this._chunker.messageBoundary();\n\n      if (flush) {\n        this._chunker.flush();\n      }\n    }\n  };\n  /**\n   * Notifies faltal erros to the observers and mark the protocol in the fatal error state.\n   * @param {Error} error The error\n   */\n\n\n  BoltProtocol.prototype.notifyFatalError = function (error) {\n    this._fatalError = error;\n    return this._responseHandler._notifyErrorToObservers(error);\n  };\n  /**\n   * Updates the the current observer with the next one on the queue.\n   */\n\n\n  BoltProtocol.prototype.updateCurrentObserver = function () {\n    return this._responseHandler._updateCurrentObserver();\n  };\n  /**\n   * Checks if exist an ongoing observable requests\n   * @return {boolean}\n   */\n\n\n  BoltProtocol.prototype.hasOngoingObservableRequests = function () {\n    return this._responseHandler.hasOngoingObservableRequests();\n  };\n  /**\n   * Enqueue the observer if the protocol is not broken.\n   * In case it's broken, the observer will be notified about the error.\n   *\n   * @param {StreamObserver} observer The observer\n   * @returns {boolean} if it was queued\n   */\n\n\n  BoltProtocol.prototype.queueObserverIfProtocolIsNotBroken = function (observer) {\n    if (this.isBroken()) {\n      this.notifyFatalErrorToObserver(observer);\n      return false;\n    }\n\n    return this._responseHandler._queueObserver(observer);\n  };\n  /**\n   * Veritfy the protocol is not broken.\n   * @returns {boolean}\n   */\n\n\n  BoltProtocol.prototype.isBroken = function () {\n    return !!this._fatalError;\n  };\n  /**\n   * Notifies the current fatal error to the observer\n   *\n   * @param {StreamObserver} observer The observer\n   */\n\n\n  BoltProtocol.prototype.notifyFatalErrorToObserver = function (observer) {\n    if (observer && observer.onError) {\n      observer.onError(this._fatalError);\n    }\n  };\n  /**\n   * Reset current failure on the observable response handler to null.\n   */\n\n\n  BoltProtocol.prototype.resetFailure = function () {\n    this._responseHandler._resetFailure();\n  };\n\n  BoltProtocol.prototype._onLoginCompleted = function (metadata, onCompleted) {\n    if (metadata) {\n      var serverVersion = metadata.server;\n\n      if (!this._server.version) {\n        this._server.version = serverVersion;\n      }\n    }\n\n    if (onCompleted) {\n      onCompleted(metadata);\n    }\n  };\n\n  BoltProtocol.prototype._onLoginError = function (error, onError) {\n    this._onProtocolError(error.message);\n\n    if (onError) {\n      onError(error);\n    }\n  };\n\n  return BoltProtocol;\n}();\n\nexports.default = BoltProtocol;","map":{"version":3,"sources":["/Users/ericyangchen/Downloads/Ont/frontend/node_modules/neo4j-driver-bolt-connection/lib/bolt/bolt-protocol-v1.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","bolt_protocol_util_1","require","packstream_1","request_message_1","stream_observers_1","neo4j_driver_core_1","Bookmark","internal","bookmark","_a","constants","ACCESS_MODE_WRITE","BOLT_PROTOCOL_V1","Logger","logger","TxConfig","txConfig","BoltProtocol","server","chunker","createResponseHandler","log","onProtocolError","_b","disableLosslessIntegers","useBigInt","_server","_chunker","_packer","_createPacker","_unpacker","_createUnpacker","_responseHandler","_log","_onProtocolError","_fatalError","prototype","get","enumerable","configurable","packer","unpacker","transformMetadata","metadata","initialize","_this","userAgent","authToken","onError","onComplete","observer","LoginObserver","error","_onLoginError","onCompleted","_onLoginCompleted","write","default","init","prepareToClose","beginTransaction","database","mode","beforeError","afterError","beforeComplete","afterComplete","run","asBeginTransactionParameters","flush","commitTransaction","empty","rollbackTransaction","query","parameters","beforeKeys","afterKeys","_c","ResultStreamObserver","assertTxConfigIsEmpty","assertDatabaseIsEmpty","pullAll","reset","ResetObserver","v1","Packer","Unpacker","message","queued","queueObserverIfProtocolIsNotBroken","isDebugEnabled","debug","packStruct","signature","fields","map","field","packable","messageBoundary","notifyFatalError","_notifyErrorToObservers","updateCurrentObserver","_updateCurrentObserver","hasOngoingObservableRequests","isBroken","notifyFatalErrorToObserver","_queueObserver","resetFailure","_resetFailure","serverVersion","version"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar bolt_protocol_util_1 = require(\"./bolt-protocol-util\");\nvar packstream_1 = require(\"../packstream\");\nvar request_message_1 = __importDefault(require(\"./request-message\"));\nvar stream_observers_1 = require(\"./stream-observers\");\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar Bookmark = neo4j_driver_core_1.internal.bookmark.Bookmark, _a = neo4j_driver_core_1.internal.constants, ACCESS_MODE_WRITE = _a.ACCESS_MODE_WRITE, BOLT_PROTOCOL_V1 = _a.BOLT_PROTOCOL_V1, Logger = neo4j_driver_core_1.internal.logger.Logger, TxConfig = neo4j_driver_core_1.internal.txConfig.TxConfig;\nvar BoltProtocol = /** @class */ (function () {\n    /**\n     * @callback CreateResponseHandler Creates the response handler\n     * @param {BoltProtocol} protocol The bolt protocol\n     * @returns {ResponseHandler} The response handler\n     */\n    /**\n     * @callback OnProtocolError Handles protocol error\n     * @param {string} error The description\n     */\n    /**\n     * @constructor\n     * @param {Object} server the server informatio.\n     * @param {Chunker} chunker the chunker.\n     * @param {Object} packstreamConfig Packstream configuration\n     * @param {boolean} packstreamConfig.disableLosslessIntegers if this connection should convert all received integers to native JS numbers.\n     * @param {boolean} packstreamConfig.useBigInt if this connection should convert all received integers to native BigInt numbers.\n     * @param {CreateResponseHandler} createResponseHandler Function which creates the response handler\n     * @param {Logger} log the logger\n     * @param {OnProtocolError} onProtocolError handles protocol errors\n     */\n    function BoltProtocol(server, chunker, _a, createResponseHandler, log, onProtocolError) {\n        var _b = _a === void 0 ? {} : _a, disableLosslessIntegers = _b.disableLosslessIntegers, useBigInt = _b.useBigInt;\n        if (createResponseHandler === void 0) { createResponseHandler = function () { return null; }; }\n        this._server = server || {};\n        this._chunker = chunker;\n        this._packer = this._createPacker(chunker);\n        this._unpacker = this._createUnpacker(disableLosslessIntegers, useBigInt);\n        this._responseHandler = createResponseHandler(this);\n        this._log = log;\n        this._onProtocolError = onProtocolError;\n        this._fatalError = null;\n    }\n    Object.defineProperty(BoltProtocol.prototype, \"version\", {\n        /**\n         * Returns the numerical version identifier for this protocol\n         */\n        get: function () {\n            return BOLT_PROTOCOL_V1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get the packer.\n     * @return {Packer} the protocol's packer.\n     */\n    BoltProtocol.prototype.packer = function () {\n        return this._packer;\n    };\n    /**\n     * Get the unpacker.\n     * @return {Unpacker} the protocol's unpacker.\n     */\n    BoltProtocol.prototype.unpacker = function () {\n        return this._unpacker;\n    };\n    /**\n     * Transform metadata received in SUCCESS message before it is passed to the handler.\n     * @param {Object} metadata the received metadata.\n     * @return {Object} transformed metadata.\n     */\n    BoltProtocol.prototype.transformMetadata = function (metadata) {\n        return metadata;\n    };\n    /**\n     * Perform initialization and authentication of the underlying connection.\n     * @param {Object} param\n     * @param {string} param.userAgent the user agent.\n     * @param {Object} param.authToken the authentication token.\n     * @param {function(err: Error)} param.onError the callback to invoke on error.\n     * @param {function()} param.onComplete the callback to invoke on completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n    BoltProtocol.prototype.initialize = function (_a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, userAgent = _b.userAgent, authToken = _b.authToken, onError = _b.onError, onComplete = _b.onComplete;\n        var observer = new stream_observers_1.LoginObserver({\n            onError: function (error) { return _this._onLoginError(error, onError); },\n            onCompleted: function (metadata) { return _this._onLoginCompleted(metadata, onComplete); }\n        });\n        this.write(request_message_1.default.init(userAgent, authToken), observer, true);\n        return observer;\n    };\n    /**\n     * Perform protocol related operations for closing this connection\n     */\n    BoltProtocol.prototype.prepareToClose = function () {\n        // no need to notify the database in this protocol version\n    };\n    /**\n     * Begin an explicit transaction.\n     * @param {Object} param\n     * @param {Bookmark} param.bookmark the bookmark.\n     * @param {TxConfig} param.txConfig the configuration.\n     * @param {string} param.database the target database name.\n     * @param {string} param.mode the access mode.\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n    BoltProtocol.prototype.beginTransaction = function (_a) {\n        var _b = _a === void 0 ? {} : _a, bookmark = _b.bookmark, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;\n        return this.run('BEGIN', bookmark ? bookmark.asBeginTransactionParameters() : {}, {\n            bookmark: bookmark,\n            txConfig: txConfig,\n            database: database,\n            mode: mode,\n            beforeError: beforeError,\n            afterError: afterError,\n            beforeComplete: beforeComplete,\n            afterComplete: afterComplete,\n            flush: false\n        });\n    };\n    /**\n     * Commit the explicit transaction.\n     * @param {Object} param\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n    BoltProtocol.prototype.commitTransaction = function (_a) {\n        var _b = _a === void 0 ? {} : _a, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;\n        // WRITE access mode is used as a place holder here, it has\n        // no effect on behaviour for Bolt V1 & V2\n        return this.run('COMMIT', {}, {\n            bookmark: Bookmark.empty(),\n            txConfig: TxConfig.empty(),\n            mode: ACCESS_MODE_WRITE,\n            beforeError: beforeError,\n            afterError: afterError,\n            beforeComplete: beforeComplete,\n            afterComplete: afterComplete\n        });\n    };\n    /**\n     * Rollback the explicit transaction.\n     * @param {Object} param\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n    BoltProtocol.prototype.rollbackTransaction = function (_a) {\n        var _b = _a === void 0 ? {} : _a, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete;\n        // WRITE access mode is used as a place holder here, it has\n        // no effect on behaviour for Bolt V1 & V2\n        return this.run('ROLLBACK', {}, {\n            bookmark: Bookmark.empty(),\n            txConfig: TxConfig.empty(),\n            mode: ACCESS_MODE_WRITE,\n            beforeError: beforeError,\n            afterError: afterError,\n            beforeComplete: beforeComplete,\n            afterComplete: afterComplete\n        });\n    };\n    /**\n     * Send a Cypher query through the underlying connection.\n     * @param {string} query the cypher query.\n     * @param {Object} parameters the query parameters.\n     * @param {Object} param\n     * @param {Bookmark} param.bookmark the bookmark.\n     * @param {TxConfig} param.txConfig the transaction configuration.\n     * @param {string} param.database the target database name.\n     * @param {string} param.mode the access mode.\n     * @param {function(keys: string[])} param.beforeKeys the callback to invoke before handling the keys.\n     * @param {function(keys: string[])} param.afterKeys the callback to invoke after handling the keys.\n     * @param {function(err: Error)} param.beforeError the callback to invoke before handling the error.\n     * @param {function(err: Error)} param.afterError the callback to invoke after handling the error.\n     * @param {function()} param.beforeComplete the callback to invoke before handling the completion.\n     * @param {function()} param.afterComplete the callback to invoke after handling the completion.\n     * @param {boolean} param.flush whether to flush the buffered messages.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n    BoltProtocol.prototype.run = function (query, parameters, _a) {\n        var _b = _a === void 0 ? {} : _a, bookmark = _b.bookmark, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, beforeKeys = _b.beforeKeys, afterKeys = _b.afterKeys, beforeError = _b.beforeError, afterError = _b.afterError, beforeComplete = _b.beforeComplete, afterComplete = _b.afterComplete, _c = _b.flush, flush = _c === void 0 ? true : _c;\n        var observer = new stream_observers_1.ResultStreamObserver({\n            server: this._server,\n            beforeKeys: beforeKeys,\n            afterKeys: afterKeys,\n            beforeError: beforeError,\n            afterError: afterError,\n            beforeComplete: beforeComplete,\n            afterComplete: afterComplete\n        });\n        // bookmark and mode are ignored in this version of the protocol\n        bolt_protocol_util_1.assertTxConfigIsEmpty(txConfig, this._onProtocolError, observer);\n        // passing in a database name on this protocol version throws an error\n        bolt_protocol_util_1.assertDatabaseIsEmpty(database, this._onProtocolError, observer);\n        this.write(request_message_1.default.run(query, parameters), observer, false);\n        this.write(request_message_1.default.pullAll(), observer, flush);\n        return observer;\n    };\n    /**\n     * Send a RESET through the underlying connection.\n     * @param {Object} param\n     * @param {function(err: Error)} param.onError the callback to invoke on error.\n     * @param {function()} param.onComplete the callback to invoke on completion.\n     * @returns {StreamObserver} the stream observer that monitors the corresponding server response.\n     */\n    BoltProtocol.prototype.reset = function (_a) {\n        var _b = _a === void 0 ? {} : _a, onError = _b.onError, onComplete = _b.onComplete;\n        var observer = new stream_observers_1.ResetObserver({\n            onProtocolError: this._onProtocolError,\n            onError: onError,\n            onComplete: onComplete\n        });\n        this.write(request_message_1.default.reset(), observer, true);\n        return observer;\n    };\n    BoltProtocol.prototype._createPacker = function (chunker) {\n        return new packstream_1.v1.Packer(chunker);\n    };\n    BoltProtocol.prototype._createUnpacker = function (disableLosslessIntegers, useBigInt) {\n        return new packstream_1.v1.Unpacker(disableLosslessIntegers, useBigInt);\n    };\n    /**\n     * Write a message to the network channel.\n     * @param {RequestMessage} message the message to write.\n     * @param {StreamObserver} observer the response observer.\n     * @param {boolean} flush `true` if flush should happen after the message is written to the buffer.\n     */\n    BoltProtocol.prototype.write = function (message, observer, flush) {\n        var _this = this;\n        var queued = this.queueObserverIfProtocolIsNotBroken(observer);\n        if (queued) {\n            if (this._log.isDebugEnabled()) {\n                this._log.debug(this + \" C: \" + message);\n            }\n            this.packer().packStruct(message.signature, message.fields.map(function (field) { return _this.packer().packable(field); }));\n            this._chunker.messageBoundary();\n            if (flush) {\n                this._chunker.flush();\n            }\n        }\n    };\n    /**\n     * Notifies faltal erros to the observers and mark the protocol in the fatal error state.\n     * @param {Error} error The error\n     */\n    BoltProtocol.prototype.notifyFatalError = function (error) {\n        this._fatalError = error;\n        return this._responseHandler._notifyErrorToObservers(error);\n    };\n    /**\n     * Updates the the current observer with the next one on the queue.\n     */\n    BoltProtocol.prototype.updateCurrentObserver = function () {\n        return this._responseHandler._updateCurrentObserver();\n    };\n    /**\n     * Checks if exist an ongoing observable requests\n     * @return {boolean}\n     */\n    BoltProtocol.prototype.hasOngoingObservableRequests = function () {\n        return this._responseHandler.hasOngoingObservableRequests();\n    };\n    /**\n     * Enqueue the observer if the protocol is not broken.\n     * In case it's broken, the observer will be notified about the error.\n     *\n     * @param {StreamObserver} observer The observer\n     * @returns {boolean} if it was queued\n     */\n    BoltProtocol.prototype.queueObserverIfProtocolIsNotBroken = function (observer) {\n        if (this.isBroken()) {\n            this.notifyFatalErrorToObserver(observer);\n            return false;\n        }\n        return this._responseHandler._queueObserver(observer);\n    };\n    /**\n     * Veritfy the protocol is not broken.\n     * @returns {boolean}\n     */\n    BoltProtocol.prototype.isBroken = function () {\n        return !!this._fatalError;\n    };\n    /**\n     * Notifies the current fatal error to the observer\n     *\n     * @param {StreamObserver} observer The observer\n     */\n    BoltProtocol.prototype.notifyFatalErrorToObserver = function (observer) {\n        if (observer && observer.onError) {\n            observer.onError(this._fatalError);\n        }\n    };\n    /**\n     * Reset current failure on the observable response handler to null.\n     */\n    BoltProtocol.prototype.resetFailure = function () {\n        this._responseHandler._resetFailure();\n    };\n    BoltProtocol.prototype._onLoginCompleted = function (metadata, onCompleted) {\n        if (metadata) {\n            var serverVersion = metadata.server;\n            if (!this._server.version) {\n                this._server.version = serverVersion;\n            }\n        }\n        if (onCompleted) {\n            onCompleted(metadata);\n        }\n    };\n    BoltProtocol.prototype._onLoginError = function (error, onError) {\n        this._onProtocolError(error.message);\n        if (onError) {\n            onError(error);\n        }\n    };\n    return BoltProtocol;\n}());\nexports.default = BoltProtocol;\n"]},"metadata":{},"sourceType":"script"}