{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.WRITE = exports.READ = exports.Driver = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _neo4jDriverCore = require(\"neo4j-driver-core\");\n\nvar _sessionRx = _interopRequireDefault(require(\"./session-rx\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar FETCH_ALL = _neo4jDriverCore.internal.constants.FETCH_ALL;\nvar READ = _neo4jDriverCore.driver.READ,\n    WRITE = _neo4jDriverCore.driver.WRITE;\n/**\n * A driver maintains one or more {@link Session}s with a remote\n * Neo4j instance. Through the {@link Session}s you can send queries\n * and retrieve results from the database.\n *\n * Drivers are reasonably expensive to create - you should strive to keep one\n * driver instance around per Neo4j Instance you connect to.\n *\n * @access public\n */\n\nexports.WRITE = WRITE;\nexports.READ = READ;\n\nvar Driver = /*#__PURE__*/function (_CoreDriver) {\n  (0, _inherits2[\"default\"])(Driver, _CoreDriver);\n\n  var _super = _createSuper(Driver);\n\n  function Driver() {\n    (0, _classCallCheck2[\"default\"])(this, Driver);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2[\"default\"])(Driver, [{\n    key: \"rxSession\",\n    value:\n    /**\n     * Acquire a reactive session to communicate with the database. The session will\n     * borrow connections from the underlying connection pool as required and\n     * should be considered lightweight and disposable.\n     *\n     * This comes with some responsibility - make sure you always call\n     * {@link close} when you are done using a session, and likewise,\n     * make sure you don't close your session before you are done using it. Once\n     * it is closed, the underlying connection will be released to the connection\n     * pool and made available for others to use.\n     *\n     * @public\n     * @param {Object} param\n     * @param {string} param.defaultAccessMode=WRITE - The access mode of this session, allowed values are {@link READ} and {@link WRITE}.\n     * @param {string|string[]} param.bookmarks - The initial reference or references to some previous transactions. Value is optional and\n     * absence indicates that the bookmarks do not exist or are unknown.\n     * @param {string} param.database - The database this session will operate on.\n     * @returns {RxSession} new reactive session.\n     */\n    function rxSession() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$defaultAccessMod = _ref.defaultAccessMode,\n          defaultAccessMode = _ref$defaultAccessMod === void 0 ? WRITE : _ref$defaultAccessMod,\n          bookmarks = _ref.bookmarks,\n          _ref$database = _ref.database,\n          database = _ref$database === void 0 ? '' : _ref$database,\n          fetchSize = _ref.fetchSize;\n\n      return new _sessionRx[\"default\"]({\n        session: this._newSession({\n          defaultAccessMode: defaultAccessMode,\n          bookmarks: bookmarks,\n          database: database,\n          reactive: true,\n          fetchSize: validateFetchSizeValue(fetchSize, this._config.fetchSize)\n        }),\n        config: this._config\n      });\n    }\n  }]);\n  return Driver;\n}(_neo4jDriverCore.Driver);\n/**\n * @private\n */\n\n\nexports.Driver = Driver;\n\nfunction validateFetchSizeValue(rawValue, defaultWhenAbsent) {\n  var fetchSize = parseInt(rawValue, 10);\n\n  if (fetchSize > 0 || fetchSize === FETCH_ALL) {\n    return fetchSize;\n  } else if (fetchSize === 0 || fetchSize < 0) {\n    throw new Error(\"The fetch size can only be a positive value or \".concat(FETCH_ALL, \" for ALL. However fetchSize = \").concat(fetchSize));\n  } else {\n    return defaultWhenAbsent;\n  }\n}\n\nvar _default = Driver;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/ericyangchen/Downloads/Ont/frontend/node_modules/neo4j-driver/lib/driver.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","WRITE","READ","Driver","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_neo4jDriverCore","_sessionRx","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","FETCH_ALL","internal","constants","driver","_CoreDriver","_super","key","rxSession","_ref","length","undefined","_ref$defaultAccessMod","defaultAccessMode","bookmarks","_ref$database","database","fetchSize","session","_newSession","reactive","validateFetchSizeValue","_config","config","rawValue","defaultWhenAbsent","parseInt","Error","concat","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.WRITE = exports.READ = exports.Driver = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _neo4jDriverCore = require(\"neo4j-driver-core\");\n\nvar _sessionRx = _interopRequireDefault(require(\"./session-rx\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar FETCH_ALL = _neo4jDriverCore.internal.constants.FETCH_ALL;\nvar READ = _neo4jDriverCore.driver.READ,\n    WRITE = _neo4jDriverCore.driver.WRITE;\n/**\n * A driver maintains one or more {@link Session}s with a remote\n * Neo4j instance. Through the {@link Session}s you can send queries\n * and retrieve results from the database.\n *\n * Drivers are reasonably expensive to create - you should strive to keep one\n * driver instance around per Neo4j Instance you connect to.\n *\n * @access public\n */\n\nexports.WRITE = WRITE;\nexports.READ = READ;\n\nvar Driver = /*#__PURE__*/function (_CoreDriver) {\n  (0, _inherits2[\"default\"])(Driver, _CoreDriver);\n\n  var _super = _createSuper(Driver);\n\n  function Driver() {\n    (0, _classCallCheck2[\"default\"])(this, Driver);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2[\"default\"])(Driver, [{\n    key: \"rxSession\",\n    value:\n    /**\n     * Acquire a reactive session to communicate with the database. The session will\n     * borrow connections from the underlying connection pool as required and\n     * should be considered lightweight and disposable.\n     *\n     * This comes with some responsibility - make sure you always call\n     * {@link close} when you are done using a session, and likewise,\n     * make sure you don't close your session before you are done using it. Once\n     * it is closed, the underlying connection will be released to the connection\n     * pool and made available for others to use.\n     *\n     * @public\n     * @param {Object} param\n     * @param {string} param.defaultAccessMode=WRITE - The access mode of this session, allowed values are {@link READ} and {@link WRITE}.\n     * @param {string|string[]} param.bookmarks - The initial reference or references to some previous transactions. Value is optional and\n     * absence indicates that the bookmarks do not exist or are unknown.\n     * @param {string} param.database - The database this session will operate on.\n     * @returns {RxSession} new reactive session.\n     */\n    function rxSession() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$defaultAccessMod = _ref.defaultAccessMode,\n          defaultAccessMode = _ref$defaultAccessMod === void 0 ? WRITE : _ref$defaultAccessMod,\n          bookmarks = _ref.bookmarks,\n          _ref$database = _ref.database,\n          database = _ref$database === void 0 ? '' : _ref$database,\n          fetchSize = _ref.fetchSize;\n\n      return new _sessionRx[\"default\"]({\n        session: this._newSession({\n          defaultAccessMode: defaultAccessMode,\n          bookmarks: bookmarks,\n          database: database,\n          reactive: true,\n          fetchSize: validateFetchSizeValue(fetchSize, this._config.fetchSize)\n        }),\n        config: this._config\n      });\n    }\n  }]);\n  return Driver;\n}(_neo4jDriverCore.Driver);\n/**\n * @private\n */\n\n\nexports.Driver = Driver;\n\nfunction validateFetchSizeValue(rawValue, defaultWhenAbsent) {\n  var fetchSize = parseInt(rawValue, 10);\n\n  if (fetchSize > 0 || fetchSize === FETCH_ALL) {\n    return fetchSize;\n  } else if (fetchSize === 0 || fetchSize < 0) {\n    throw new Error(\"The fetch size can only be a positive value or \".concat(FETCH_ALL, \" for ALL. However fetchSize = \").concat(fetchSize));\n  } else {\n    return defaultWhenAbsent;\n  }\n}\n\nvar _default = Driver;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}