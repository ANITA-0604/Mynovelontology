{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n\nvar _a = neo4j_driver_core_1.internal.constants,\n    ACCESS_MODE_READ = _a.ACCESS_MODE_READ,\n    FETCH_ALL = _a.FETCH_ALL,\n    assertString = neo4j_driver_core_1.internal.util.assertString;\n/* eslint-disable no-unused-vars */\n// Signature bytes for each request message type\n\nvar INIT = 0x01; // 0000 0001 // INIT <user_agent> <authentication_token>\n\nvar ACK_FAILURE = 0x0e; // 0000 1110 // ACK_FAILURE - unused\n\nvar RESET = 0x0f; // 0000 1111 // RESET\n\nvar RUN = 0x10; // 0001 0000 // RUN <query> <parameters>\n\nvar DISCARD_ALL = 0x2f; // 0010 1111 // DISCARD_ALL - unused\n\nvar PULL_ALL = 0x3f; // 0011 1111 // PULL_ALL\n\nvar HELLO = 0x01; // 0000 0001 // HELLO <metadata>\n\nvar GOODBYE = 0x02; // 0000 0010 // GOODBYE\n\nvar BEGIN = 0x11; // 0001 0001 // BEGIN <metadata>\n\nvar COMMIT = 0x12; // 0001 0010 // COMMIT\n\nvar ROLLBACK = 0x13; // 0001 0011 // ROLLBACK\n\nvar ROUTE = 0x66; // 0110 0110 // ROUTE\n\nvar DISCARD = 0x2f; // 0010 1111 // DISCARD\n\nvar PULL = 0x3f; // 0011 1111 // PULL\n\nvar READ_MODE = 'r';\n/* eslint-enable no-unused-vars */\n\nvar NO_STATEMENT_ID = -1;\n\nvar RequestMessage =\n/** @class */\nfunction () {\n  function RequestMessage(signature, fields, toString) {\n    this.signature = signature;\n    this.fields = fields;\n    this.toString = toString;\n  }\n  /**\n   * Create a new INIT message.\n   * @param {string} clientName the client name.\n   * @param {Object} authToken the authentication token.\n   * @return {RequestMessage} new INIT message.\n   */\n\n\n  RequestMessage.init = function (clientName, authToken) {\n    return new RequestMessage(INIT, [clientName, authToken], function () {\n      return \"INIT \" + clientName + \" {...}\";\n    });\n  };\n  /**\n   * Create a new RUN message.\n   * @param {string} query the cypher query.\n   * @param {Object} parameters the query parameters.\n   * @return {RequestMessage} new RUN message.\n   */\n\n\n  RequestMessage.run = function (query, parameters) {\n    return new RequestMessage(RUN, [query, parameters], function () {\n      return \"RUN \" + query + \" \" + neo4j_driver_core_1.json.stringify(parameters);\n    });\n  };\n  /**\n   * Get a PULL_ALL message.\n   * @return {RequestMessage} the PULL_ALL message.\n   */\n\n\n  RequestMessage.pullAll = function () {\n    return PULL_ALL_MESSAGE;\n  };\n  /**\n   * Get a RESET message.\n   * @return {RequestMessage} the RESET message.\n   */\n\n\n  RequestMessage.reset = function () {\n    return RESET_MESSAGE;\n  };\n  /**\n   * Create a new HELLO message.\n   * @param {string} userAgent the user agent.\n   * @param {Object} authToken the authentication token.\n   * @param {Object} optional server side routing, set to routing context to turn on server side routing (> 4.1)\n   * @return {RequestMessage} new HELLO message.\n   */\n\n\n  RequestMessage.hello = function (userAgent, authToken, routing) {\n    if (routing === void 0) {\n      routing = null;\n    }\n\n    var metadata = Object.assign({\n      user_agent: userAgent\n    }, authToken);\n\n    if (routing) {\n      metadata.routing = routing;\n    }\n\n    return new RequestMessage(HELLO, [metadata], function () {\n      return \"HELLO {user_agent: '\" + userAgent + \"', ...}\";\n    });\n  };\n  /**\n   * Create a new BEGIN message.\n   * @param {Bookmark} bookmark the bookmark.\n   * @param {TxConfig} txConfig the configuration.\n   * @param {string} database the database name.\n   * @param {string} mode the access mode.\n   * @return {RequestMessage} new BEGIN message.\n   */\n\n\n  RequestMessage.begin = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        bookmark = _b.bookmark,\n        txConfig = _b.txConfig,\n        database = _b.database,\n        mode = _b.mode;\n\n    var metadata = buildTxMetadata(bookmark, txConfig, database, mode);\n    return new RequestMessage(BEGIN, [metadata], function () {\n      return \"BEGIN \" + neo4j_driver_core_1.json.stringify(metadata);\n    });\n  };\n  /**\n   * Get a COMMIT message.\n   * @return {RequestMessage} the COMMIT message.\n   */\n\n\n  RequestMessage.commit = function () {\n    return COMMIT_MESSAGE;\n  };\n  /**\n   * Get a ROLLBACK message.\n   * @return {RequestMessage} the ROLLBACK message.\n   */\n\n\n  RequestMessage.rollback = function () {\n    return ROLLBACK_MESSAGE;\n  };\n  /**\n   * Create a new RUN message with additional metadata.\n   * @param {string} query the cypher query.\n   * @param {Object} parameters the query parameters.\n   * @param {Bookmark} bookmark the bookmark.\n   * @param {TxConfig} txConfig the configuration.\n   * @param {string} database the database name.\n   * @param {string} mode the access mode.\n   * @return {RequestMessage} new RUN message with additional metadata.\n   */\n\n\n  RequestMessage.runWithMetadata = function (query, parameters, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        bookmark = _b.bookmark,\n        txConfig = _b.txConfig,\n        database = _b.database,\n        mode = _b.mode;\n\n    var metadata = buildTxMetadata(bookmark, txConfig, database, mode);\n    return new RequestMessage(RUN, [query, parameters, metadata], function () {\n      return \"RUN \" + query + \" \" + neo4j_driver_core_1.json.stringify(parameters) + \" \" + neo4j_driver_core_1.json.stringify(metadata);\n    });\n  };\n  /**\n   * Get a GOODBYE message.\n   * @return {RequestMessage} the GOODBYE message.\n   */\n\n\n  RequestMessage.goodbye = function () {\n    return GOODBYE_MESSAGE;\n  };\n  /**\n   * Generates a new PULL message with additional metadata.\n   * @param {Integer|number} stmtId\n   * @param {Integer|number} n\n   * @return {RequestMessage} the PULL message.\n   */\n\n\n  RequestMessage.pull = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.stmtId,\n        stmtId = _c === void 0 ? NO_STATEMENT_ID : _c,\n        _d = _b.n,\n        n = _d === void 0 ? FETCH_ALL : _d;\n\n    var metadata = buildStreamMetadata(stmtId === null || stmtId === undefined ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL);\n    return new RequestMessage(PULL, [metadata], function () {\n      return \"PULL \" + neo4j_driver_core_1.json.stringify(metadata);\n    });\n  };\n  /**\n   * Generates a new DISCARD message with additional metadata.\n   * @param {Integer|number} stmtId\n   * @param {Integer|number} n\n   * @return {RequestMessage} the PULL message.\n   */\n\n\n  RequestMessage.discard = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.stmtId,\n        stmtId = _c === void 0 ? NO_STATEMENT_ID : _c,\n        _d = _b.n,\n        n = _d === void 0 ? FETCH_ALL : _d;\n\n    var metadata = buildStreamMetadata(stmtId === null || stmtId === undefined ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL);\n    return new RequestMessage(DISCARD, [metadata], function () {\n      return \"DISCARD \" + neo4j_driver_core_1.json.stringify(metadata);\n    });\n  };\n  /**\n   * Generate the ROUTE message, this message is used to fetch the routing table from the server\n   *\n   * @param {object} routingContext The routing context used to define the routing table. Multi-datacenter deployments is one of its use cases\n   * @param {string[]} bookmarks The list of the bookmark should be used\n   * @param {string} databaseName The name of the database to get the routing table for.\n   * @return {RequestMessage} the ROUTE message.\n   */\n\n\n  RequestMessage.route = function (routingContext, bookmarks, databaseName) {\n    if (routingContext === void 0) {\n      routingContext = {};\n    }\n\n    if (bookmarks === void 0) {\n      bookmarks = [];\n    }\n\n    if (databaseName === void 0) {\n      databaseName = null;\n    }\n\n    return new RequestMessage(ROUTE, [routingContext, bookmarks, databaseName], function () {\n      return \"ROUTE \" + neo4j_driver_core_1.json.stringify(routingContext) + \" \" + neo4j_driver_core_1.json.stringify(bookmarks) + \" \" + databaseName;\n    });\n  };\n\n  return RequestMessage;\n}();\n\nexports.default = RequestMessage;\n/**\n * Create an object that represent transaction metadata.\n * @param {Bookmark} bookmark the bookmark.\n * @param {TxConfig} txConfig the configuration.\n * @param {string} database the database name.\n * @param {string} mode the access mode.\n * @return {Object} a metadata object.\n */\n\nfunction buildTxMetadata(bookmark, txConfig, database, mode) {\n  var metadata = {};\n\n  if (!bookmark.isEmpty()) {\n    metadata.bookmarks = bookmark.values();\n  }\n\n  if (txConfig.timeout) {\n    metadata.tx_timeout = txConfig.timeout;\n  }\n\n  if (txConfig.metadata) {\n    metadata.tx_metadata = txConfig.metadata;\n  }\n\n  if (database) {\n    metadata.db = assertString(database, 'database');\n  }\n\n  if (mode === ACCESS_MODE_READ) {\n    metadata.mode = READ_MODE;\n  }\n\n  return metadata;\n}\n/**\n * Create an object that represents streaming metadata.\n * @param {Integer|number} stmtId The query id to stream its results.\n * @param {Integer|number} n The number of records to stream.\n * @returns {Object} a metadata object.\n */\n\n\nfunction buildStreamMetadata(stmtId, n) {\n  var metadata = {\n    n: neo4j_driver_core_1.int(n)\n  };\n\n  if (stmtId !== NO_STATEMENT_ID) {\n    metadata.qid = neo4j_driver_core_1.int(stmtId);\n  }\n\n  return metadata;\n} // constants for messages that never change\n\n\nvar PULL_ALL_MESSAGE = new RequestMessage(PULL_ALL, [], function () {\n  return 'PULL_ALL';\n});\nvar RESET_MESSAGE = new RequestMessage(RESET, [], function () {\n  return 'RESET';\n});\nvar COMMIT_MESSAGE = new RequestMessage(COMMIT, [], function () {\n  return 'COMMIT';\n});\nvar ROLLBACK_MESSAGE = new RequestMessage(ROLLBACK, [], function () {\n  return 'ROLLBACK';\n});\nvar GOODBYE_MESSAGE = new RequestMessage(GOODBYE, [], function () {\n  return 'GOODBYE';\n});","map":{"version":3,"sources":["/Users/ericyangchen/Downloads/Ont/frontend/node_modules/neo4j-driver-bolt-connection/lib/bolt/request-message.js"],"names":["Object","defineProperty","exports","value","neo4j_driver_core_1","require","_a","internal","constants","ACCESS_MODE_READ","FETCH_ALL","assertString","util","INIT","ACK_FAILURE","RESET","RUN","DISCARD_ALL","PULL_ALL","HELLO","GOODBYE","BEGIN","COMMIT","ROLLBACK","ROUTE","DISCARD","PULL","READ_MODE","NO_STATEMENT_ID","RequestMessage","signature","fields","toString","init","clientName","authToken","run","query","parameters","json","stringify","pullAll","PULL_ALL_MESSAGE","reset","RESET_MESSAGE","hello","userAgent","routing","metadata","assign","user_agent","begin","_b","bookmark","txConfig","database","mode","buildTxMetadata","commit","COMMIT_MESSAGE","rollback","ROLLBACK_MESSAGE","runWithMetadata","goodbye","GOODBYE_MESSAGE","pull","_c","stmtId","_d","n","buildStreamMetadata","undefined","discard","route","routingContext","bookmarks","databaseName","default","isEmpty","values","timeout","tx_timeout","tx_metadata","db","int","qid"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [http://neo4j.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar _a = neo4j_driver_core_1.internal.constants, ACCESS_MODE_READ = _a.ACCESS_MODE_READ, FETCH_ALL = _a.FETCH_ALL, assertString = neo4j_driver_core_1.internal.util.assertString;\n/* eslint-disable no-unused-vars */\n// Signature bytes for each request message type\nvar INIT = 0x01; // 0000 0001 // INIT <user_agent> <authentication_token>\nvar ACK_FAILURE = 0x0e; // 0000 1110 // ACK_FAILURE - unused\nvar RESET = 0x0f; // 0000 1111 // RESET\nvar RUN = 0x10; // 0001 0000 // RUN <query> <parameters>\nvar DISCARD_ALL = 0x2f; // 0010 1111 // DISCARD_ALL - unused\nvar PULL_ALL = 0x3f; // 0011 1111 // PULL_ALL\nvar HELLO = 0x01; // 0000 0001 // HELLO <metadata>\nvar GOODBYE = 0x02; // 0000 0010 // GOODBYE\nvar BEGIN = 0x11; // 0001 0001 // BEGIN <metadata>\nvar COMMIT = 0x12; // 0001 0010 // COMMIT\nvar ROLLBACK = 0x13; // 0001 0011 // ROLLBACK\nvar ROUTE = 0x66; // 0110 0110 // ROUTE\nvar DISCARD = 0x2f; // 0010 1111 // DISCARD\nvar PULL = 0x3f; // 0011 1111 // PULL\nvar READ_MODE = 'r';\n/* eslint-enable no-unused-vars */\nvar NO_STATEMENT_ID = -1;\nvar RequestMessage = /** @class */ (function () {\n    function RequestMessage(signature, fields, toString) {\n        this.signature = signature;\n        this.fields = fields;\n        this.toString = toString;\n    }\n    /**\n     * Create a new INIT message.\n     * @param {string} clientName the client name.\n     * @param {Object} authToken the authentication token.\n     * @return {RequestMessage} new INIT message.\n     */\n    RequestMessage.init = function (clientName, authToken) {\n        return new RequestMessage(INIT, [clientName, authToken], function () { return \"INIT \" + clientName + \" {...}\"; });\n    };\n    /**\n     * Create a new RUN message.\n     * @param {string} query the cypher query.\n     * @param {Object} parameters the query parameters.\n     * @return {RequestMessage} new RUN message.\n     */\n    RequestMessage.run = function (query, parameters) {\n        return new RequestMessage(RUN, [query, parameters], function () { return \"RUN \" + query + \" \" + neo4j_driver_core_1.json.stringify(parameters); });\n    };\n    /**\n     * Get a PULL_ALL message.\n     * @return {RequestMessage} the PULL_ALL message.\n     */\n    RequestMessage.pullAll = function () {\n        return PULL_ALL_MESSAGE;\n    };\n    /**\n     * Get a RESET message.\n     * @return {RequestMessage} the RESET message.\n     */\n    RequestMessage.reset = function () {\n        return RESET_MESSAGE;\n    };\n    /**\n     * Create a new HELLO message.\n     * @param {string} userAgent the user agent.\n     * @param {Object} authToken the authentication token.\n     * @param {Object} optional server side routing, set to routing context to turn on server side routing (> 4.1)\n     * @return {RequestMessage} new HELLO message.\n     */\n    RequestMessage.hello = function (userAgent, authToken, routing) {\n        if (routing === void 0) { routing = null; }\n        var metadata = Object.assign({ user_agent: userAgent }, authToken);\n        if (routing) {\n            metadata.routing = routing;\n        }\n        return new RequestMessage(HELLO, [metadata], function () { return \"HELLO {user_agent: '\" + userAgent + \"', ...}\"; });\n    };\n    /**\n     * Create a new BEGIN message.\n     * @param {Bookmark} bookmark the bookmark.\n     * @param {TxConfig} txConfig the configuration.\n     * @param {string} database the database name.\n     * @param {string} mode the access mode.\n     * @return {RequestMessage} new BEGIN message.\n     */\n    RequestMessage.begin = function (_a) {\n        var _b = _a === void 0 ? {} : _a, bookmark = _b.bookmark, txConfig = _b.txConfig, database = _b.database, mode = _b.mode;\n        var metadata = buildTxMetadata(bookmark, txConfig, database, mode);\n        return new RequestMessage(BEGIN, [metadata], function () { return \"BEGIN \" + neo4j_driver_core_1.json.stringify(metadata); });\n    };\n    /**\n     * Get a COMMIT message.\n     * @return {RequestMessage} the COMMIT message.\n     */\n    RequestMessage.commit = function () {\n        return COMMIT_MESSAGE;\n    };\n    /**\n     * Get a ROLLBACK message.\n     * @return {RequestMessage} the ROLLBACK message.\n     */\n    RequestMessage.rollback = function () {\n        return ROLLBACK_MESSAGE;\n    };\n    /**\n     * Create a new RUN message with additional metadata.\n     * @param {string} query the cypher query.\n     * @param {Object} parameters the query parameters.\n     * @param {Bookmark} bookmark the bookmark.\n     * @param {TxConfig} txConfig the configuration.\n     * @param {string} database the database name.\n     * @param {string} mode the access mode.\n     * @return {RequestMessage} new RUN message with additional metadata.\n     */\n    RequestMessage.runWithMetadata = function (query, parameters, _a) {\n        var _b = _a === void 0 ? {} : _a, bookmark = _b.bookmark, txConfig = _b.txConfig, database = _b.database, mode = _b.mode;\n        var metadata = buildTxMetadata(bookmark, txConfig, database, mode);\n        return new RequestMessage(RUN, [query, parameters, metadata], function () {\n            return \"RUN \" + query + \" \" + neo4j_driver_core_1.json.stringify(parameters) + \" \" + neo4j_driver_core_1.json.stringify(metadata);\n        });\n    };\n    /**\n     * Get a GOODBYE message.\n     * @return {RequestMessage} the GOODBYE message.\n     */\n    RequestMessage.goodbye = function () {\n        return GOODBYE_MESSAGE;\n    };\n    /**\n     * Generates a new PULL message with additional metadata.\n     * @param {Integer|number} stmtId\n     * @param {Integer|number} n\n     * @return {RequestMessage} the PULL message.\n     */\n    RequestMessage.pull = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.stmtId, stmtId = _c === void 0 ? NO_STATEMENT_ID : _c, _d = _b.n, n = _d === void 0 ? FETCH_ALL : _d;\n        var metadata = buildStreamMetadata(stmtId === null || stmtId === undefined ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL);\n        return new RequestMessage(PULL, [metadata], function () { return \"PULL \" + neo4j_driver_core_1.json.stringify(metadata); });\n    };\n    /**\n     * Generates a new DISCARD message with additional metadata.\n     * @param {Integer|number} stmtId\n     * @param {Integer|number} n\n     * @return {RequestMessage} the PULL message.\n     */\n    RequestMessage.discard = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.stmtId, stmtId = _c === void 0 ? NO_STATEMENT_ID : _c, _d = _b.n, n = _d === void 0 ? FETCH_ALL : _d;\n        var metadata = buildStreamMetadata(stmtId === null || stmtId === undefined ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL);\n        return new RequestMessage(DISCARD, [metadata], function () { return \"DISCARD \" + neo4j_driver_core_1.json.stringify(metadata); });\n    };\n    /**\n     * Generate the ROUTE message, this message is used to fetch the routing table from the server\n     *\n     * @param {object} routingContext The routing context used to define the routing table. Multi-datacenter deployments is one of its use cases\n     * @param {string[]} bookmarks The list of the bookmark should be used\n     * @param {string} databaseName The name of the database to get the routing table for.\n     * @return {RequestMessage} the ROUTE message.\n     */\n    RequestMessage.route = function (routingContext, bookmarks, databaseName) {\n        if (routingContext === void 0) { routingContext = {}; }\n        if (bookmarks === void 0) { bookmarks = []; }\n        if (databaseName === void 0) { databaseName = null; }\n        return new RequestMessage(ROUTE, [routingContext, bookmarks, databaseName], function () {\n            return \"ROUTE \" + neo4j_driver_core_1.json.stringify(routingContext) + \" \" + neo4j_driver_core_1.json.stringify(bookmarks) + \" \" + databaseName;\n        });\n    };\n    return RequestMessage;\n}());\nexports.default = RequestMessage;\n/**\n * Create an object that represent transaction metadata.\n * @param {Bookmark} bookmark the bookmark.\n * @param {TxConfig} txConfig the configuration.\n * @param {string} database the database name.\n * @param {string} mode the access mode.\n * @return {Object} a metadata object.\n */\nfunction buildTxMetadata(bookmark, txConfig, database, mode) {\n    var metadata = {};\n    if (!bookmark.isEmpty()) {\n        metadata.bookmarks = bookmark.values();\n    }\n    if (txConfig.timeout) {\n        metadata.tx_timeout = txConfig.timeout;\n    }\n    if (txConfig.metadata) {\n        metadata.tx_metadata = txConfig.metadata;\n    }\n    if (database) {\n        metadata.db = assertString(database, 'database');\n    }\n    if (mode === ACCESS_MODE_READ) {\n        metadata.mode = READ_MODE;\n    }\n    return metadata;\n}\n/**\n * Create an object that represents streaming metadata.\n * @param {Integer|number} stmtId The query id to stream its results.\n * @param {Integer|number} n The number of records to stream.\n * @returns {Object} a metadata object.\n */\nfunction buildStreamMetadata(stmtId, n) {\n    var metadata = { n: neo4j_driver_core_1.int(n) };\n    if (stmtId !== NO_STATEMENT_ID) {\n        metadata.qid = neo4j_driver_core_1.int(stmtId);\n    }\n    return metadata;\n}\n// constants for messages that never change\nvar PULL_ALL_MESSAGE = new RequestMessage(PULL_ALL, [], function () { return 'PULL_ALL'; });\nvar RESET_MESSAGE = new RequestMessage(RESET, [], function () { return 'RESET'; });\nvar COMMIT_MESSAGE = new RequestMessage(COMMIT, [], function () { return 'COMMIT'; });\nvar ROLLBACK_MESSAGE = new RequestMessage(ROLLBACK, [], function () { return 'ROLLBACK'; });\nvar GOODBYE_MESSAGE = new RequestMessage(GOODBYE, [], function () { return 'GOODBYE'; });\n"]},"metadata":{},"sourceType":"script"}